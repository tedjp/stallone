STALLONE(8)
===========
Ted Percival <ted@midg3t.net>


NAME
----
stallone - NAT Port-Mapping Protocol (NAT-PMP) Gateway Daemon


SYNOPSIS
--------
'stallone' [OPTIONS]


DESCRIPTION
-----------
stallone(8) provides computers on directly-attached private networks
with the possibility of having TCP and UDP ports forwarded to them for
the purpose of receiving direct connections from machines on the
internet.


OPTIONS
-------

-c, --check::
        Check whether a stallone process is already running. Returns 0
        (success) if there is one is running and 1 if there is not.

-D, --daemonize::
        Detach from the terminal and run as a background daemon. Implies `-s`.

-f, --config `FILE`::
        Read configuration from `FILE` instead of the default
        `@NATPMD_DEFAULT_CONFIG_FILE@`

-h, --help::
        Provide a list of options.

-k, --kill::
        Kill an existing stallone process.

--no-chroot::
        Don't `chroot(2)` the daemon (usually only for debugging).

-s, --syslog::
        Send log messages to syslog instead of (`stderr`) (implied by `-D`).

-V, --version::
        Display stallone's version number and exit.


ABOUT
-----

Stallone: NAT-PMP Gateway Daemon

Stallone implements the NAT Port-Mapping Protocol (NAT-PMP) allowing
machines on a private network to get publicly-routable TCP and UDP ports
automatically.


CONFIGURATION
-------------

The default configuration file is @NATPMD_DEFAULT_CONFIG_FILE@, but
another may be used by providing the `--config` (`-f`) option at
startup.

The following configuration options are available, shown here with their
default values.

  [natpmd]
  min-port=@NATPMD_DEFAULT_MIN_PORT@
  max-port=@NATPMD_DEFAULT_MAX_PORT@
  mapping-script=@NATPMD_DEFAULT_MAPPING_SCRIPT@


SECURITY
--------
Stallone's architecture is two processes. The main process which
maintains state information, and the worker process that handles
creating and removing the actual port mappings.

The main process runs in a chroot as an unprivileged user. The worker
process runs as root and is not chrooted -- it needs to be able to
access the machine's firewall configuration (usually iptables). The
worker is kept small for easy auditing, and communicates with the main
process over a pipe using a simple & strict protocol.


SEE ALSO
--------

* Home page: http://tedp.id.au/stallone/[]
* Bug tracker: http://lazypants.org/bugzilla/[]

// vim: tw=72 ts=8 sw=8 et
